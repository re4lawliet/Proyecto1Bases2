/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package proyecto1bases2;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author carlosmonterroso
 */
public class TransferenciaDeFondos extends javax.swing.JFrame {
	
	ResultSet datosCuentaOrigen;
	ResultSet datosCuentaDestino;

	/**
	 * Creates new form TransferenciaDeFondos
	 */
	public TransferenciaDeFondos() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        CajaCuentaOrigen = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        CajaCantidad = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        CajaCuentaDestino = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Menu de Transferencia de Fondos");

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setText("Numero de Cuenta Origen de Fondos:");

        jLabel3.setText("Cantidad a Transferir: ");

        jLabel5.setText("Numero de Cuenta Destino:");

        jButton2.setText("Realizar Trnsferencia");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CajaCuentaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CajaCantidad))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(CajaCuentaDestino)))
                        .addGap(0, 19, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton2)
                .addGap(120, 120, 120))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(CajaCuentaOrigen, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(CajaCantidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(CajaCuentaDestino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton2)
                .addContainerGap(193, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
		Inicio.menu_rp.setVisible(true);
		this.dispose();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // Boton de Transferencia de Fondos
		
	Validaciones v = new Validaciones();
	//Obteniendo Datos
	String Usuario = Inicio.Session;
	String Cantidad=CajaCantidad.getText();
	String NumeroCuentaOrigen=CajaCuentaOrigen.getText();
	String NumeroCuentaDestino=CajaCuentaDestino.getText();
	
	Date objDate = new Date(); // Sistema actual La fecha y la hora se asignan a objDate 
	String FechaHora=objDate.toString();
	String TipoTransaccion="Transferencia";
	String Terminal=Inicio.Terminal;
	Boolean esCorrecto=true;
	
	if(v.esNumero(NumeroCuentaOrigen)){//----------------------------CUENTA ORIGEN
		//revisar que la cuenta Exista
		BaseDeDatos db = new BaseDeDatos();
		String consulta = "SELECT * FROM CUENTA WHERE ID_CUENTA="+NumeroCuentaOrigen;
		Boolean banderaCuenta=false;
		try{
			
			Connection conn = db.conexion();
			if (conn != null) {
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(consulta);
				//datosCuenta=stmt.executeQuery(consulta);
				while(rs.next()){
					if(rs.getString("ID_CUENTA").equals(NumeroCuentaOrigen)){
						banderaCuenta=true;
						break;
					}
				}
				
			} else {
					System.out.println("NO HAY CONEXION");
			}
			
			if(banderaCuenta){
				//Esta Bien La Cuenta revisar si esta activa
				boolean banderaEstadoCuenta=false;
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(consulta);
				//datosCuenta=stmt.executeQuery(consulta);
				while(rs.next()){
					if(rs.getString("ESTADO").equals("1")){
						banderaEstadoCuenta=true;
						break;
					}
				}

				if(banderaEstadoCuenta){
					//esta bien todo
				}else{
					JOptionPane.showMessageDialog(null, "El estado de la cuenta Origen es Cancelada o Bloqueada ","ERROR",JOptionPane.ERROR_MESSAGE);
					esCorrecto=false;
				}

			}else{
				JOptionPane.showMessageDialog(null, "El Numero de Cuenta Origen No Existe en la BD","ERROR",JOptionPane.ERROR_MESSAGE);
				esCorrecto=false;
			}
			
		}catch(Exception e){  
			JOptionPane.showMessageDialog(rootPane, "Numero de Cuenta Origen Invalido No Existe Ese numero de Cuenta");
		}	
		
	}else{
	
		JOptionPane.showMessageDialog(null, "El Numero de Cuenta Origen Debe Ser Numerico","ERROR",JOptionPane.ERROR_MESSAGE);
		esCorrecto=false;
	} 
	
	if(v.esNumero(Cantidad)){//----------------------------CANTIDAD
	}else{
		JOptionPane.showMessageDialog(null, "La CAntidad es Invalida","ERROR",JOptionPane.ERROR_MESSAGE);
		esCorrecto=false;
	}
	
	if(v.esNumero(NumeroCuentaDestino)){//----------------------------CUENTA DESTINO
		//revisar que la cuenta Exista
		BaseDeDatos db = new BaseDeDatos();
		String consulta = "SELECT * FROM CUENTA WHERE ID_CUENTA="+NumeroCuentaDestino;
		Boolean banderaCuenta=false;
		try{
			
			Connection conn = db.conexion();
			if (conn != null) {
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(consulta);
				//datosCuenta=stmt.executeQuery(consulta);
				while(rs.next()){
					if(rs.getString("ID_CUENTA").equals(NumeroCuentaDestino)){
						banderaCuenta=true;
						break;
					}
				}
				
			} else {
					System.out.println("NO HAY CONEXION");
			}
			
			if(banderaCuenta){
				//Esta Bien La Cuenta revisar si esta activa
				boolean banderaEstadoCuenta=false;
				Statement stmt = conn.createStatement();
				ResultSet rs = stmt.executeQuery(consulta);
				//datosCuenta=stmt.executeQuery(consulta);
				while(rs.next()){
					if(rs.getString("ESTADO").equals("1")){
						banderaEstadoCuenta=true;
						break;
					}
				}

				if(banderaEstadoCuenta){
					//esta bien todo
				}else{
					JOptionPane.showMessageDialog(null, "El estado de la cuenta Destino es Cancelada o Bloqueada ","ERROR",JOptionPane.ERROR_MESSAGE);
					esCorrecto=false;
				}

			}else{
				JOptionPane.showMessageDialog(null, "El Numero de Cuenta Destino No Existe en la BD","ERROR",JOptionPane.ERROR_MESSAGE);
				esCorrecto=false;
			}
			
		}catch(Exception e){  
			JOptionPane.showMessageDialog(rootPane, "Numero de Cuenta Destino Invalido No Existe Ese numero de Cuenta");
		}	
		
	}else{
	
		JOptionPane.showMessageDialog(null, "El Numero de Cuenta Destino Debe Ser Numerico","ERROR",JOptionPane.ERROR_MESSAGE);
		esCorrecto=false;
	} 
	
	
	if(esCorrecto){
		JOptionPane.showMessageDialog(rootPane, "CORRECTO TRANSACCION");
		try{
			
			//-----------------------------------------Obteniendo Datos de La Cuenta Origen
			BaseDeDatos db1 = new BaseDeDatos();
			String consulta1 = "SELECT * FROM CUENTA WHERE ID_CUENTA="+NumeroCuentaOrigen;
			Connection connn = db1.conexion();
			if (connn != null) {
				Statement stmt = connn.createStatement();
				datosCuentaOrigen= stmt.executeQuery(consulta1);
			}else{
				System.out.println("NO HAY CONEXION");
			}
			//-----------------------------------------Obteniendo Datos de La Cuenta Destino
			BaseDeDatos db2 = new BaseDeDatos();
			String consulta2 = "SELECT * FROM CUENTA WHERE ID_CUENTA="+NumeroCuentaOrigen;
			Connection connn2 = db2.conexion();
			if (connn != null) {
				Statement stmt = connn2.createStatement();
				datosCuentaDestino= stmt.executeQuery(consulta2);
			}else{
				System.out.println("NO HAY CONEXION");
			}
			
			//-----------------------------------------------------Origen
			String saldoOrigen="";
			String idCuentaOrigen="";
			String idAgenciaOrigen="";
			String idUsuarioOrigen="";
			while(datosCuentaOrigen.next()){
				saldoOrigen=datosCuentaOrigen.getString("SALDO");
				idCuentaOrigen=datosCuentaOrigen.getString("ID_CUENTA");
				idAgenciaOrigen=datosCuentaOrigen.getString("ID_AGENCIA");
				idUsuarioOrigen=datosCuentaOrigen.getString("ID_USUARIO");
			}
			//-----------------------------------------------------Destino
			String saldoDestino="";
			String idCuentaDestino="";
			String idAgenciaDestino="";
			String idUsuarioDestino="";
			while(datosCuentaDestino.next()){
				saldoDestino=datosCuentaDestino.getString("SALDO");
				idCuentaDestino=datosCuentaDestino.getString("ID_CUENTA");
				idAgenciaDestino=datosCuentaDestino.getString("ID_AGENCIA");
				idUsuarioDestino=datosCuentaDestino.getString("ID_USUARIO");
			}
			
			
			
			int s_Origen=Integer.parseInt(saldoOrigen);
			int s_Destino=Integer.parseInt(saldoDestino);
			int cant=Integer.parseInt(Cantidad);
			
			if(cant>s_Origen){
				JOptionPane.showMessageDialog(null, "Fondos Insuficientes en Cuenta De Origen","ERROR",JOptionPane.ERROR_MESSAGE);
			}else{
				
				int restaOrigen=s_Origen-cant;
				
				//-----------------------------------------Insertando en Transaccion
				BaseDeDatos bd = new BaseDeDatos();
				Connection conn = bd.conexion();
				if (conn != null) {
					String query = "INSERT INTO TRANSACCION (FECHA, TIPO_TRANSACCION, TERMINAL, SALDO_INICIAL, VALOR, SALDO_FINAL, ID_AGENCIA, ID_USUARIO, ID_CUENTA)"
								+ "VALUES('"+FechaHora+"','"+TipoTransaccion+"','"+Terminal+"','"+saldoOrigen+"','"+Cantidad+"','"+restaOrigen+"','"+idAgenciaOrigen+"','"+idUsuarioOrigen+"',"+idCuentaOrigen+")";
					System.out.println(query);
					Statement stmt = conn.createStatement();
					int count = stmt.executeUpdate(query);
					System.out.println(count + "filas fueron afectadas en TRANSACCION");


				}else{
					System.out.println("NO HAY CONEXION");
				}
				
				//Restando de LA Origen
				BaseDeDatos db = new BaseDeDatos();
				String consulta = "UPDATE cuenta SET SALDO = '"+restaOrigen+"' where id_cuenta = "+idCuentaOrigen;
				
				try{
					Connection conn2 = db.conexion();
					Statement stmt = conn2.createStatement();
					System.out.println(consulta);
					int count = stmt.executeUpdate(consulta);
					System.out.println(count + "filas fueron afectadas Cuenta");
					//JOptionPane.showMessageDialog(rootPane, "Se Genero Deposito a Cuenta Origen"+idCuentaOrigen);
					Inicio.menu_rp.setVisible(true);
					this.dispose();
				}catch(Exception e){
					JOptionPane.showMessageDialog(null,"Error En Transaccion de SALDO\nExcepcion: "+e,"ERROR", JOptionPane.ERROR_MESSAGE);
				}
				
				int sumaDestino=s_Destino+cant;
				
				//-----------------------------------------Insertando en Transaccion
				BaseDeDatos bd2 = new BaseDeDatos();
				Connection conn2 = bd2.conexion();
				if (conn != null) {
					String query = "INSERT INTO TRANSACCION (FECHA, TIPO_TRANSACCION, TERMINAL, SALDO_INICIAL, VALOR, SALDO_FINAL, ID_AGENCIA, ID_USUARIO, ID_CUENTA)"
								+ "VALUES('"+FechaHora+"','"+TipoTransaccion+"','"+Terminal+"','"+saldoDestino+"','"+Cantidad+"','"+sumaDestino+"','"+idAgenciaDestino+"','"+idUsuarioDestino+"',"+idCuentaDestino+")";
					System.out.println(query);
					Statement stmt = conn.createStatement();
					int count = stmt.executeUpdate(query);
					System.out.println(count + "filas fueron afectadas en TRANSACCION");


				}else{
					System.out.println("NO HAY CONEXION");
				}
				
				//SUmar en Destino
				BaseDeDatos db3 = new BaseDeDatos();
				String consulta3 = "UPDATE cuenta SET SALDO = '"+sumaDestino+"' where id_cuenta = "+idCuentaDestino;
				
				try{
					Connection conn3 = db3.conexion();
					Statement stmt = conn3.createStatement();
					System.out.println(consulta3);
					int count = stmt.executeUpdate(consulta3);
					System.out.println(count + "filas fueron afectadas Cuenta");
					JOptionPane.showMessageDialog(rootPane, "Se Genero Deposito a Cuenta"+idCuentaDestino);
					Inicio.menu_rp.setVisible(true);
					this.dispose();
				}catch(Exception e){
					JOptionPane.showMessageDialog(null,"Error En Transaccion de SALDO\nExcepcion: "+e,"ERROR", JOptionPane.ERROR_MESSAGE);
				}
				
			}
			
			
			
		}catch(SQLException e) {
				System.err.format("SQL Error : %s\n%s", e.getSQLState(), e.getMessage());
		}
	}
	
	
	
    }//GEN-LAST:event_jButton2ActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
		//<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
		/* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(TransferenciaDeFondos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(TransferenciaDeFondos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(TransferenciaDeFondos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(TransferenciaDeFondos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		//</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new TransferenciaDeFondos().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField CajaCantidad;
    private javax.swing.JTextField CajaCuentaDestino;
    private javax.swing.JTextField CajaCuentaOrigen;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    // End of variables declaration//GEN-END:variables
}
